//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Inputs/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""BoatController"",
            ""id"": ""34c07280-cd5a-4b1f-b620-0fba9920c0ee"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""e90668be-91a5-4950-b5ad-22e54c2dd405"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""9bd292bd-9941-4c8e-8112-db802779a85b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""db5a98ea-407f-4f2a-a41e-d186749d2819"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""45ba2002-a7f4-428f-9f0e-43b23dc06759"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""8f9b5b22-e5f0-4579-8e34-2df03e5bf492"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ammo selection"",
                    ""type"": ""Button"",
                    ""id"": ""7bd679fe-4b64-436d-b176-ca6120fe1749"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5f1ed601-1f3f-41b5-9dbd-5d61e46e873c"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a73f6313-9beb-4e22-9d1e-b4de93ad0584"",
                    ""path"": ""<SwitchProControllerHID>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4022dfd8-305d-4850-8678-106380c49cff"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""298d27cf-5141-4de7-9b9c-843854042e5c"",
                    ""path"": ""<SwitchProControllerHID>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c4ea1ab-1e7a-4e25-a62b-97774998139a"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56c1ee67-53c9-4e7d-85a0-5152a37176c5"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a582a9e6-3919-42f5-b0d3-88317282e4c0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fcec6fe2-eb5e-49ec-95f0-cb83adaeecb0"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35a25720-9ea3-4387-9525-04e51460ad57"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1133752d-d42e-4efb-9d8a-dea4633ea131"",
                    ""path"": ""<SwitchProControllerHID>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Left/Right"",
                    ""id"": ""962a8a88-656e-4f59-a84b-721c29313c22"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ammo selection"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""3d8147d2-6048-48d8-b46b-d70a2fcba4b8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ammo selection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ade07e72-c901-4fb4-ab15-021570a11d8b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ammo selection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BoatController
        m_BoatController = asset.FindActionMap("BoatController", throwIfNotFound: true);
        m_BoatController_Up = m_BoatController.FindAction("Up", throwIfNotFound: true);
        m_BoatController_Down = m_BoatController.FindAction("Down", throwIfNotFound: true);
        m_BoatController_Left = m_BoatController.FindAction("Left", throwIfNotFound: true);
        m_BoatController_Right = m_BoatController.FindAction("Right", throwIfNotFound: true);
        m_BoatController_Fire = m_BoatController.FindAction("Fire", throwIfNotFound: true);
        m_BoatController_Ammoselection = m_BoatController.FindAction("Ammo selection", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BoatController
    private readonly InputActionMap m_BoatController;
    private IBoatControllerActions m_BoatControllerActionsCallbackInterface;
    private readonly InputAction m_BoatController_Up;
    private readonly InputAction m_BoatController_Down;
    private readonly InputAction m_BoatController_Left;
    private readonly InputAction m_BoatController_Right;
    private readonly InputAction m_BoatController_Fire;
    private readonly InputAction m_BoatController_Ammoselection;
    public struct BoatControllerActions
    {
        private @PlayerInput m_Wrapper;
        public BoatControllerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_BoatController_Up;
        public InputAction @Down => m_Wrapper.m_BoatController_Down;
        public InputAction @Left => m_Wrapper.m_BoatController_Left;
        public InputAction @Right => m_Wrapper.m_BoatController_Right;
        public InputAction @Fire => m_Wrapper.m_BoatController_Fire;
        public InputAction @Ammoselection => m_Wrapper.m_BoatController_Ammoselection;
        public InputActionMap Get() { return m_Wrapper.m_BoatController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BoatControllerActions set) { return set.Get(); }
        public void SetCallbacks(IBoatControllerActions instance)
        {
            if (m_Wrapper.m_BoatControllerActionsCallbackInterface != null)
            {
                @Up.started -= m_Wrapper.m_BoatControllerActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_BoatControllerActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_BoatControllerActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_BoatControllerActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_BoatControllerActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_BoatControllerActionsCallbackInterface.OnDown;
                @Left.started -= m_Wrapper.m_BoatControllerActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_BoatControllerActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_BoatControllerActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_BoatControllerActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_BoatControllerActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_BoatControllerActionsCallbackInterface.OnRight;
                @Fire.started -= m_Wrapper.m_BoatControllerActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_BoatControllerActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_BoatControllerActionsCallbackInterface.OnFire;
                @Ammoselection.started -= m_Wrapper.m_BoatControllerActionsCallbackInterface.OnAmmoselection;
                @Ammoselection.performed -= m_Wrapper.m_BoatControllerActionsCallbackInterface.OnAmmoselection;
                @Ammoselection.canceled -= m_Wrapper.m_BoatControllerActionsCallbackInterface.OnAmmoselection;
            }
            m_Wrapper.m_BoatControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @Ammoselection.started += instance.OnAmmoselection;
                @Ammoselection.performed += instance.OnAmmoselection;
                @Ammoselection.canceled += instance.OnAmmoselection;
            }
        }
    }
    public BoatControllerActions @BoatController => new BoatControllerActions(this);
    public interface IBoatControllerActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnAmmoselection(InputAction.CallbackContext context);
    }
}
